import requests
import pandas as pd
import os

# ServiceNow credentials and instance details
instance = "your_instance_name"
user = "your_username"
password = "your_password"

# API endpoint
url = f"https://{instance}.service-now.com/api/now/table/"

# Headers
headers = {
    "Accept": "application/json",
    "Content-Type": "application/json"
}

def get_tables_from_csv(csv_file_path):
    """
    Read the list of table names from a CSV file.
    """
    df = pd.read_csv(csv_file_path)
    return df['table_name'].tolist()

def export_table_to_csv(table_name, output_dir):
    """
    Export a single CMDB table to a CSV file.
    """
    print(f"Exporting {table_name}...")

    # Paginate through all records if necessary
    offset = 0
    limit = 10000  # Adjust as needed
    all_records = []

    while True:
        response = requests.get(
            f"{url}{table_name}?sysparm_offset={offset}&sysparm_limit={limit}",
            auth=(user, password),
            headers=headers
        )

        if response.status_code != 200:
            print(f"Failed to retrieve records for {table_name}: {response.text}")
            break

        records = response.json().get('result', [])
        if not records:
            break

        all_records.extend(records)
        offset += limit

    # Convert to DataFrame and write to CSV
    if all_records:
        df = pd.DataFrame(all_records)
        output_path = os.path.join(output_dir, f"{table_name}.csv")
        df.to_csv(output_path, index=False)
    else:
        print(f"No records found for {table_name}")

def main():
    # Path to the CSV file containing the list of tables
    csv_file_path = "table_list.csv"

    # Directory to save the CSV files
    output_dir = "cmdb_exports"
    os.makedirs(output_dir, exist_ok=True)

    # Get the list of tables from the CSV file
    tables = get_tables_from_csv(csv_file_path)

    # Export each table to a CSV file
    for table in tables:
        export_table_to_csv(table, output_dir)

    print("Export completed.")

if __name__ == "__main__":
    main()

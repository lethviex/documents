import boto3
from botocore.exceptions import ClientError

# Configuration
org_profiles = ['org1-master', 'org2-master']  # AWS CLI profile names
assume_role_name = 'OrganizationAccountAccessRole'

def get_all_accounts(profile):
    session = boto3.Session(profile_name=profile)
    org_client = session.client('organizations')
    accounts = []
    paginator = org_client.get_paginator('list_accounts')
    for page in paginator.paginate():
        for acct in page['Accounts']:
            if acct['Status'] == 'ACTIVE':
                accounts.append(acct['Id'])
    return accounts

def assume_role(account_id, role_name, session_name="s3InventorySession"):
    role_arn = f'arn:aws:iam::{account_id}:role/{role_name}'
    try:
        sts_client = boto3.client('sts')
        response = sts_client.assume_role(
            RoleArn=role_arn,
            RoleSessionName=session_name
        )
        creds = response['Credentials']
        return boto3.Session(
            aws_access_key_id=creds['AccessKeyId'],
            aws_secret_access_key=creds['SecretAccessKey'],
            aws_session_token=creds['SessionToken']
        )
    except ClientError as e:
        print(f"Could not assume role in account {account_id}: {e}")
        return None

def list_buckets(session, account_id):
    try:
        s3 = session.client('s3')
        response = s3.list_buckets()
        for bucket in response.get('Buckets', []):
            print(f"{account_id}, {bucket['Name']}")
    except ClientError as e:
        print(f"Error listing buckets in account {account_id}: {e}")

# Main logic
for profile in org_profiles:
    print(f"\n--- Fetching accounts from organization profile: {profile} ---")
    accounts = get_all_accounts(profile)
    for account_id in accounts:
        session = assume_role(account_id, assume_role_name)
        if session:
            list_buckets(session, account_id)
